generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id                   Int                    @id @default(autoincrement())
  name                 String
  detail               String?
  defaultHours         Int
  tutorLink            String?
  clueLink             String?
  price                Int?
  status               String
  odmCourseId          Int?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  branch               String?                @db.VarChar(45)
  webappCourseId       Int?
  playlist             String?
  tutorId              Int?
  imageUrl             String?
  Tutor                Tutor?                 @relation(fields: [tutorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tutorId")
  CourseLesson         CourseLesson[]
  CourseOnCourseLesson CourseOnCourseLesson[]
  Delivery             Delivery[]
  Delivery_Course      Delivery_Course[]

  @@index([name])
  @@index([tutorLink], map: "tutorLink_idx")
  @@index([tutorId], map: "tutorId_idx")
}

model CourseLesson {
  id                    Int                     @id @default(autoincrement())
  name                  String
  position              Int
  courseIdLesson        Int?
  courseId              Int
  Course                Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "courseIdLesson")
  CourseOnCourseLesson  CourseOnCourseLesson[]
  CourseVideo           CourseVideo[]
  LessonOnDocument      LessonOnDocument[]
  LessonOnDocumentBook  LessonOnDocumentBook[]
  LessonOnDocumentSheet LessonOnDocumentSheet[]

  @@index([courseIdLesson], map: "courseId_idx")
  @@index([courseId], map: "courseId_idx1")
}

model CourseOnCourseLesson {
  courseId     Int
  lessonId     Int
  Course       Course       @relation(fields: [courseId], references: [id])
  CourseLesson CourseLesson @relation(fields: [lessonId], references: [id])

  @@id([courseId, lessonId])
  @@index([lessonId], map: "CourseOnCourseLesson_lessonId_fkey")
}

model CourseVideo {
  id            Int          @id @default(autoincrement())
  videoLink     String       @db.VarChar(255)
  hour          Int
  minute        Int
  position      Int
  lessonId      Int
  descriptionId Int?
  name          String?
  webappVideoId Int
  playlistName  String?      @db.VarChar(255)
  contentName   String?
  CourseLesson  CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId], map: "CourseVideo_lessonId_fkey")
}

model DocumentBook {
  id                   Int                    @id @default(autoincrement())
  image                String?
  inStock              Int                    @default(0)
  name                 String
  term                 String?                @db.VarChar(45)
  year                 String?                @db.VarChar(10)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now())
  volume               String?
  BookTransactions     BookTransactions[]
  LessonOnDocumentBook LessonOnDocumentBook[]
  RecordBook           RecordBook[]

  @@index([name])
}

model DocumentPreExam {
  id               Int                @id @default(autoincrement())
  name             String
  url              String
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @default(now())
  LessonOnDocument LessonOnDocument[]

  @@index([name])
}

model DocumentSheet {
  id                    Int                     @id @default(autoincrement())
  name                  String
  url                   String
  createdAt             DateTime?               @default(now())
  updatedAt             DateTime?               @default(now())
  LessonOnDocumentSheet LessonOnDocumentSheet[]
  RecordSheet           RecordSheet[]

  @@index([name])
}

model LessonOnDocument {
  lessonId        Int
  preExamId       Int
  CourseLesson    CourseLesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  DocumentPreExam DocumentPreExam @relation(fields: [preExamId], references: [id])

  @@id([lessonId, preExamId])
  @@index([preExamId], map: "LessonOnDocument_preExamId_fkey")
}

model LessonOnDocumentBook {
  lessonId     Int
  bookId       Int
  DocumentBook DocumentBook @relation(fields: [bookId], references: [id], onDelete: Cascade)
  CourseLesson CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([lessonId, bookId])
  @@index([bookId], map: "LessonOnDocumentBook_bookId_fkey")
}

model LessonOnDocumentSheet {
  lessonId      Int
  sheetId       Int
  CourseLesson  CourseLesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  DocumentSheet DocumentSheet @relation(fields: [sheetId], references: [id])

  @@id([lessonId, sheetId])
  @@index([sheetId], map: "LessonOnDocumentSheet_sheetId_fkey")
}

model DeliverShipService {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(45)
  imageUrl    String?
  trackingUrl String?
  Delivery    Delivery[]
}

model Delivery {
  id                    Int                     @id @default(autoincrement())
  type                  String                  @db.VarChar(45)
  status                String                  @db.VarChar(45)
  updatedAddress        String?                 @db.VarChar(255)
  courseId              Int?
  webappOrderId         Int                     @unique(map: "webappOrderId_UNIQUE")
  webappCourseId        String?                 @db.VarChar(255)
  webappAdminId         Int?
  note                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  serviceId             Int?
  trackingCode          String?
  member                String?                 @db.VarChar(255)
  branch                String?                 @db.VarChar(45)
  mobile                String?                 @db.VarChar(20)
  approved              DateTime?               @db.DateTime(0)
  webappAdminUsername   String?                 @db.VarChar(45)
  BookTransactions      BookTransactions[]
  Course                Course?                 @relation(fields: [courseId], references: [id], onUpdate: NoAction, map: "courseId")
  DeliverShipService    DeliverShipService?     @relation(fields: [serviceId], references: [id], onDelete: Restrict, map: "trackingServiceId")
  Delivery_Course       Delivery_Course[]
  Delivery_WebappCourse Delivery_WebappCourse[]
  RecordBook            RecordBook[]
  RecordSheet           RecordSheet[]

  @@index([courseId], map: "courseId_idx")
  @@index([serviceId], map: "trackingServiceId_idx")
  @@index([id], map: "recordBookId_idx")
}

model Tutor {
  id        Int      @id
  name      String   @db.VarChar(45)
  tutorLink String?
  email     String?
  Course    Course[]
}

model Delivery_Course {
  id             Int       @id @default(autoincrement())
  deliveryId     Int?
  courseId       Int?
  webappOrderId  Int?
  webappCourseId Int?
  Course         Course?   @relation(fields: [courseId], references: [id], onUpdate: SetNull, map: "middleCourseId")
  Delivery       Delivery? @relation(fields: [deliveryId], references: [id], onUpdate: SetNull, map: "middleDeliveryId")

  @@index([courseId], map: "middleCourseId_idx")
  @@index([deliveryId], map: "middleDeliveryId_idx")
}

model Delivery_WebappCourse {
  deliverId      Int?
  webappCourseId Int?
  id             Int           @id @default(autoincrement())
  Delivery       Delivery?     @relation(fields: [deliverId], references: [id], onUpdate: SetNull, map: "middleDeliver")
  WebappCourse   WebappCourse? @relation(fields: [webappCourseId], references: [webappCourseId], onDelete: NoAction, onUpdate: NoAction, map: "middleWebappCourse")

  @@index([deliverId], map: "middleDeliver")
  @@index([webappCourseId], map: "middleWebappCourse_idx")
}

model WebappCourse {
  id                    Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(255)
  term                  String?                 @db.VarChar(255)
  webappCourseId        Int?                    @unique(map: "webappCourseId_UNIQUE")
  Delivery_WebappCourse Delivery_WebappCourse[]
}

model BookTransactions {
  id           Int          @id @default(autoincrement())
  startDate    DateTime     @db.DateTime(0)
  endDate      DateTime     @db.DateTime(0)
  detail       String       @db.VarChar(100)
  qty          Int
  createdAt    DateTime     @default(now())
  bookId       Int
  deliverId    Int?
  DocumentBook DocumentBook @relation(fields: [bookId], references: [id], onDelete: Cascade, map: "bookId")
  Delivery     Delivery?    @relation(fields: [deliverId], references: [id], map: "deliverId")

  @@index([bookId], map: "bookId_idx")
  @@index([deliverId], map: "deliverId_idx")
}

model RecordBook {
  id              Int           @id @default(autoincrement())
  detail          String?       @db.VarChar(45)
  book_documentId Int?
  book_deliverId  Int?
  createdAt       String?       @db.VarChar(45)
  Delivery        Delivery?     @relation(fields: [book_deliverId], references: [id], map: "book_deliverId")
  DocumentBook    DocumentBook? @relation(fields: [book_documentId], references: [id], map: "book_documentId")

  @@index([book_documentId], map: "bookId_idx")
  @@index([book_deliverId], map: "book_deliverId_idx")
}

model RecordSheet {
  id              Int            @id @default(autoincrement())
  detail          String?        @db.VarChar(45)
  sheetId         Int?
  sheet_deliverId Int?
  createdAt       DateTime?      @default(now())
  DocumentSheet   DocumentSheet? @relation(fields: [sheetId], references: [id], map: "sheetId")
  Delivery        Delivery?      @relation(fields: [sheet_deliverId], references: [id], map: "sheet_deliverId")

  @@index([sheet_deliverId], map: "deliverId_idx")
  @@index([sheetId], map: "sheetId_idx")
}
